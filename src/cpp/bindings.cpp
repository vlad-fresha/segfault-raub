#ifdef _WIN32
#include <windows.h>
#else
#include <signal.h>
#endif

#include "segfault-handler.hpp"

#define JS_SF_CONSTANT(name) \
	do { \
		napi_value num_val; \
		napi_create_double(env, static_cast<double>(name), &num_val); \
		napi_set_named_property(env, exports, #name, num_val); \
	} while(0)

#define JS_SF_NULL(name) \
	do { \
		napi_value null_val; \
		napi_get_null(env, &null_val); \
		napi_set_named_property(env, exports, #name, null_val); \
	} while(0)

#define JS_SF_SET_METHOD(name) \
	do { \
		napi_value fn; \
		napi_create_function(env, #name, NAPI_AUTO_LENGTH, segfault::name, nullptr, &fn); \
		napi_set_named_property(env, exports, #name, fn); \
	} while(0)

napi_value initModule(napi_env env, napi_value exports) {
	segfault::init();

	JS_SF_SET_METHOD(causeSegfault);
	JS_SF_SET_METHOD(causeDivisionInt);
	JS_SF_SET_METHOD(causeOverflow);
	JS_SF_SET_METHOD(causeIllegal);
	JS_SF_SET_METHOD(setSignal);
	JS_SF_SET_METHOD(setOutputFormat);
	JS_SF_SET_METHOD(getOutputFormat);

#ifdef _WIN32
	JS_SF_CONSTANT(EXCEPTION_ACCESS_VIOLATION);
	JS_SF_CONSTANT(EXCEPTION_DATATYPE_MISALIGNMENT);
	JS_SF_CONSTANT(EXCEPTION_BREAKPOINT);
	JS_SF_CONSTANT(EXCEPTION_SINGLE_STEP);
	JS_SF_CONSTANT(EXCEPTION_ARRAY_BOUNDS_EXCEEDED);
	JS_SF_CONSTANT(EXCEPTION_FLT_DENORMAL_OPERAND);
	JS_SF_CONSTANT(EXCEPTION_FLT_DIVIDE_BY_ZERO);
	JS_SF_CONSTANT(EXCEPTION_FLT_INEXACT_RESULT);
	JS_SF_CONSTANT(EXCEPTION_FLT_INVALID_OPERATION);
	JS_SF_CONSTANT(EXCEPTION_FLT_OVERFLOW);
	JS_SF_CONSTANT(EXCEPTION_FLT_STACK_CHECK);
	JS_SF_CONSTANT(EXCEPTION_FLT_UNDERFLOW);
	JS_SF_CONSTANT(EXCEPTION_INT_DIVIDE_BY_ZERO);
	JS_SF_CONSTANT(EXCEPTION_INT_OVERFLOW);
	JS_SF_CONSTANT(EXCEPTION_PRIV_INSTRUCTION);
	JS_SF_CONSTANT(EXCEPTION_IN_PAGE_ERROR);
	JS_SF_CONSTANT(EXCEPTION_ILLEGAL_INSTRUCTION);
	JS_SF_CONSTANT(EXCEPTION_NONCONTINUABLE_EXCEPTION);
	JS_SF_CONSTANT(EXCEPTION_STACK_OVERFLOW);
	JS_SF_CONSTANT(EXCEPTION_INVALID_DISPOSITION);
	JS_SF_CONSTANT(EXCEPTION_GUARD_PAGE);
	JS_SF_CONSTANT(EXCEPTION_INVALID_HANDLE);

	JS_SF_NULL(SIGINT);
	JS_SF_NULL(SIGILL);
	JS_SF_NULL(SIGABRT);
	JS_SF_NULL(SIGFPE);
	JS_SF_NULL(SIGSEGV);
	JS_SF_NULL(SIGTERM);
	JS_SF_NULL(SIGHUP);
	JS_SF_NULL(SIGQUIT);
	JS_SF_NULL(SIGTRAP);
	JS_SF_NULL(SIGBUS);
	JS_SF_NULL(SIGKILL);
	JS_SF_NULL(SIGUSR1);
	JS_SF_NULL(SIGUSR2);
	JS_SF_NULL(SIGPIPE);
	JS_SF_NULL(SIGALRM);
	JS_SF_NULL(SIGCHLD);
	JS_SF_NULL(SIGCONT);
	JS_SF_NULL(SIGSTOP);
	JS_SF_NULL(SIGTSTP);
	JS_SF_NULL(SIGTTIN);
	JS_SF_NULL(SIGTTOU);
	JS_SF_NULL(SIGURG);
	JS_SF_NULL(SIGXCPU);
	JS_SF_NULL(SIGXFSZ);
	JS_SF_NULL(SIGVTALRM);
	JS_SF_NULL(SIGPROF);
	JS_SF_NULL(SIGWINCH);
	JS_SF_NULL(SIGSYS);
#else
	JS_SF_NULL(EXCEPTION_ACCESS_VIOLATION);
	JS_SF_NULL(EXCEPTION_DATATYPE_MISALIGNMENT);
	JS_SF_NULL(EXCEPTION_BREAKPOINT);
	JS_SF_NULL(EXCEPTION_SINGLE_STEP);
	JS_SF_NULL(EXCEPTION_ARRAY_BOUNDS_EXCEEDED);
	JS_SF_NULL(EXCEPTION_FLT_DENORMAL_OPERAND);
	JS_SF_NULL(EXCEPTION_FLT_DIVIDE_BY_ZERO);
	JS_SF_NULL(EXCEPTION_FLT_INEXACT_RESULT);
	JS_SF_NULL(EXCEPTION_FLT_INVALID_OPERATION);
	JS_SF_NULL(EXCEPTION_FLT_OVERFLOW);
	JS_SF_NULL(EXCEPTION_FLT_STACK_CHECK);
	JS_SF_NULL(EXCEPTION_FLT_UNDERFLOW);
	JS_SF_NULL(EXCEPTION_INT_DIVIDE_BY_ZERO);
	JS_SF_NULL(EXCEPTION_INT_OVERFLOW);
	JS_SF_NULL(EXCEPTION_PRIV_INSTRUCTION);
	JS_SF_NULL(EXCEPTION_IN_PAGE_ERROR);
	JS_SF_NULL(EXCEPTION_ILLEGAL_INSTRUCTION);
	JS_SF_NULL(EXCEPTION_NONCONTINUABLE_EXCEPTION);
	JS_SF_NULL(EXCEPTION_STACK_OVERFLOW);
	JS_SF_NULL(EXCEPTION_INVALID_DISPOSITION);
	JS_SF_NULL(EXCEPTION_GUARD_PAGE);
	JS_SF_NULL(EXCEPTION_INVALID_HANDLE);

	JS_SF_CONSTANT(SIGINT);
	JS_SF_CONSTANT(SIGILL);
	JS_SF_CONSTANT(SIGABRT);
	JS_SF_CONSTANT(SIGFPE);
	JS_SF_CONSTANT(SIGSEGV);
	JS_SF_CONSTANT(SIGTERM);
	JS_SF_CONSTANT(SIGHUP);
	JS_SF_CONSTANT(SIGQUIT);
	JS_SF_CONSTANT(SIGTRAP);
	JS_SF_CONSTANT(SIGBUS);
	JS_SF_CONSTANT(SIGKILL);
	JS_SF_CONSTANT(SIGUSR1);
	JS_SF_CONSTANT(SIGUSR2);
	JS_SF_CONSTANT(SIGPIPE);
	JS_SF_CONSTANT(SIGALRM);
	JS_SF_CONSTANT(SIGCHLD);
	JS_SF_CONSTANT(SIGCONT);
	JS_SF_CONSTANT(SIGSTOP);
	JS_SF_CONSTANT(SIGTSTP);
	JS_SF_CONSTANT(SIGTTIN);
	JS_SF_CONSTANT(SIGTTOU);
	JS_SF_CONSTANT(SIGURG);
	JS_SF_CONSTANT(SIGXCPU);
	JS_SF_CONSTANT(SIGXFSZ);
	JS_SF_CONSTANT(SIGVTALRM);
	JS_SF_CONSTANT(SIGPROF);
	JS_SF_CONSTANT(SIGWINCH);
	JS_SF_CONSTANT(SIGSYS);
#endif

	return exports;
}

NAPI_MODULE(vlad_fresha_segfault_handler, initModule)