name: NodeCI

on:
  push:

env:
  NAPI_VERSION: 9
  BINDING_NAME: vlad_fresha_segfault_handler

jobs:
  build-and-test:
    name: Build ${{ matrix.image }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
        image: [node:20-alpine3.22, node:22-alpine3.22, node:24-alpine3.22, node:20, node:22, node:24]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ contains(matrix.image, 'node:20') && '20.x' || contains(matrix.image, 'node:22') && '22.x' || '24.x' }}"

      - name: Run build & test in native container
        shell: bash
        run: |
          docker run --rm -v ${{ github.workspace }}:/work \
            -e CI=1 -e npm_config_build_from_source=1 -e NAPI_VERSION -e BINDING_NAME \
            ${{ matrix.image }} \
            sh -c "
              export ARCH=${{ matrix.os == 'ubuntu-24.04-arm' && 'arm64' || 'amd64' }}

              # Install dependencies based on container type
              if command -v apk > /dev/null; then
                # Alpine Linux
                apk update
                apk add build-base git python3 musl-dev linux-headers libunwind-dev libunwind-static
              else
                # Debian-based
                apt-get update
                apt-get install -y build-essential git python3 libunwind-dev pkg-config
              fi

              cd /work
              npm install
              npm run rebuild -- --arch=\${ARCH}
              mkdir -p prebuilds/$BINDING_NAME-linux-\${ARCH}
              cp build/Release/$BINDING_NAME.node prebuilds/$BINDING_NAME-linux-\${ARCH}/node-napi-v$NAPI_VERSION.node
              npm run test-ci
            "

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.image }}-prebuilds
          path: prebuilds
          retention-days: 1

  bundle:
    name: Bundle prebuilds
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: tmp

      - name: Display structure of downloaded files
        run: |
          mkdir prebuilds
          cp -R tmp/*/* prebuilds/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-prebuilds
          path: prebuilds
          retention-days: 7
