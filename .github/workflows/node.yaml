name: NodeCI

on:
  push:

env:
  NAPI_VERSION: 9
  BINDING_NAME: vlad_fresha_segfault_handler
  MACOSX_DEPLOYMENT_TARGET: "10.13"

jobs:
  build-and-test:
    name: Build ${{ matrix.arch }} on ${{ matrix.alpine-version && format('node:{0}-alpine{1}', matrix.node-version, matrix.alpine-version) || format('{0} Node {1}', matrix.os, matrix.node-version) }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.alpine-version && matrix.arch == 'amd64' && format('node:{0}-alpine{1}', matrix.node-version, matrix.alpine-version) || '' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        # present version means we use Alpine Linux with musl, empty string - vanilla ubuntu without container & glibc
        alpine-version: ['3.22', '']
        node-version: [20, 22, 24]
        arch: [amd64, arm64]
        exclude:
          - alpine-version: ''
            node-version: 20
          - alpine-version: ''
            node-version: 22
          - alpine-version: ''
            arch: arm64

    steps:
      - name: Dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y libunwind-dev

      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: ${{ !matrix.alpine-version }}
        uses: actions/setup-node@v4
        with:
          node-version: "${{ matrix.node-version }}.x"

      - name: Rebuild
        if: ${{ matrix.arch == 'amd64' }}
        shell: bash
        run: |
          npm install
          npm run rebuild -- --arch=${{ matrix.arch == 'amd64' && 'x64' || 'arm64' }}

          # Create prebuilds structure manually for better reliability
          PLATFORM=""
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PLATFORM="win32"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PLATFORM="darwin"
          else
            PLATFORM="linux"
          fi

          ARCH_DIR="${{ matrix.arch == 'amd64' && 'x64' || 'arm64' }}"
          mkdir -p "prebuilds/$BINDING_NAME-$PLATFORM-$ARCH_DIR/"
          if [ -f "build/Release/$BINDING_NAME.node" ]; then
            cp "build/Release/$BINDING_NAME.node" "prebuilds/$BINDING_NAME-$PLATFORM-$ARCH_DIR/node-napi-v$NAPI_VERSION.node"
            echo "Copied $BINDING_NAME.node to prebuilds directory"
          else
            echo "ERROR: $BINDING_NAME.node not found in build/Release/"
            exit 1
          fi

          npm run test-ci
        env:
          CI: true
          npm_config_build_from_source: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: matrix.arch == 'arm64'

      - name: Pre-fetch image
        if: matrix.arch == 'arm64'
        run: docker pull node:${{ matrix.node-version }}-alpine${{ matrix.alpine-version }} --platform=linux/arm64

      - name: Rebuild (in docker)
        uses: addnab/docker-run-action@v3
        if: matrix.arch == 'arm64'
        with:
          image: node:${{ matrix.node-version }}-alpine${{ matrix.alpine-version }}
          options: --platform=linux/${{ matrix.arch }} -v ${{ github.workspace }}:/work -e CI=1 -e npm_config_build_from_source=1 -e NAPI_VERSION -e BINDING_NAME
          run: |
            apk update
            apk add build-base git python3 bash musl-dev linux-headers libunwind-dev libunwind-static
            # Verify libunwind installation
            pkg-config --libs libunwind || echo "libunwind pkg-config not available"
            ls -la /usr/lib/libunwind* 2>/dev/null || echo "libunwind libraries not found"
            echo "Alpine Linux build environment ready with libunwind support"
            
            cd /work

            npm install
            npm run rebuild -- --arch=${{ matrix.arch }}
            ls -la build/Release/ || echo "No build/Release directory"

            # Create prebuilds structure manually if pkg-prebuilds-copy fails
            mkdir -p prebuilds/$BINDING_NAME-linux-${{ matrix.arch }}/
            if [ -f "build/Release/$BINDING_NAME.node" ]; then
              cp "build/Release/$BINDING_NAME.node" "prebuilds/$BINDING_NAME-linux-${{ matrix.arch }}/node-napi-v$NAPI_VERSION.node"
              echo "Copied $BINDING_NAME.node to prebuilds directory"
            else
              echo "ERROR: $BINDING_NAME.node not found in build/Release/"
              exit 1
            fi

            # Debug: Check prebuilds structure
            find prebuilds -name "*.node" -ls || echo "No .node files in prebuilds"

            npm run test-ci
