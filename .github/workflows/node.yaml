name: NodeCI

on:
  push:

env:
  NAPI_VERSION: 9
  BINDING_NAME: vlad_fresha_segfault_handler
  MACOSX_DEPLOYMENT_TARGET: "10.13"

jobs:
  test-linux:
    name: Test ${{ matrix.image }} (${{ matrix.stack-lib }}) on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
        image: [node:20-alpine3.22, node:22-alpine3.22, node:24-alpine3.22, node:20, node:22, node:24]
        stack-lib: [glibc, libunwind]
        exclude:
          # Alpine containers don't use glibc
          - image: node:20-alpine3.22
            stack-lib: glibc
          - image: node:22-alpine3.22
            stack-lib: glibc
          - image: node:24-alpine3.22
            stack-lib: glibc

    steps:
      - uses: actions/checkout@v4

      - name: Build & test in native container
        shell: bash
        run: |
          docker run --rm -v ${{ github.workspace }}:/work \
            -e CI=1 -e npm_config_build_from_source=1 -e NAPI_VERSION -e BINDING_NAME \
            ${{ matrix.image }} \
            sh -c "
              export ARCH=${{ matrix.os == 'ubuntu-24.04-arm' && 'arm64' || 'amd64' }}

              if command -v apk > /dev/null; then
                apk add --no-cache build-base python3 libunwind-dev
              else
                apt-get update && apt-get install -y build-essential python3
                if [ '${{ matrix.stack-lib }}' = 'libunwind' ]; then
                  apt-get install -y libunwind-dev
                else
                  # For glibc builds, ensure execinfo is available (usually built-in)
                  apt-get install -y libc6-dev
                fi
              fi

              cd /work
              npm install
              npm run rebuild -- --arch=\${ARCH}
              mkdir -p prebuilds/$BINDING_NAME-linux-\${ARCH}
              cp build/Release/$BINDING_NAME.node prebuilds/$BINDING_NAME-linux-\${ARCH}/node-napi-v$NAPI_VERSION.node
              npm run eslint
              npm run test-ci
            "

  test-native:
    name: Test Node.js ${{ matrix.node }} on ${{ matrix.os }} ${{ matrix.arch }}
    needs: test-linux
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            arch: x64
            node: '24.x'
          - os: macos-latest
            arch: arm64
            node: '24.x'
          - os: macos-13
            arch: x64
            node: '24.x'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS typically uses built-in libunwind, no extra deps needed
          echo "macOS using built-in libunwind"

      - name: Build & Test
        shell: bash
        run: |
          npm install
          npm run rebuild -- --arch=${{ matrix.arch }}

          # Create prebuilds directory structure
          PLATFORM=""
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            PLATFORM="win32"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PLATFORM="darwin"
          else
            PLATFORM="linux"
          fi

          mkdir -p "prebuilds/$BINDING_NAME-$PLATFORM-${{ matrix.arch }}"
          if [ -f "build/Release/$BINDING_NAME.node" ]; then
            cp "build/Release/$BINDING_NAME.node" "prebuilds/$BINDING_NAME-$PLATFORM-${{ matrix.arch }}/node-napi-v$NAPI_VERSION.node"
            echo "Copied $BINDING_NAME.node to prebuilds directory"
          else
            echo "ERROR: $BINDING_NAME.node not found in build/Release/"
            exit 1
          fi

          npm run eslint
          npm run test-ci
        env:
          CI: true
          npm_config_build_from_source: true
